# RainWeather Flutter 项目规则

## 项目概述

RainWeather 是一款功能丰富的 Flutter 天气应用，提供精准的天气信息、智能提醒和个性化服务。

### 核心功能
- **多平台定位**: 支持 GPS、北斗、IP定位等多种方式，针对国内网络环境优化
- **全面天气数据**: 提供当前天气、24小时预报、15日预报、空气质量等信息
- **智能提醒系统**: 包括天气提醒、气象预警、通勤建议三大模块
- **AI增强服务**: 提供穿搭顾问、健康管家、异常天气预警等AI功能
- **精美UI设计**: 遵循 Material Design 3 规范，支持亮色/暗色主题自适应
- **用户个性化**: 支持自定义城市、提醒设置、主题切换等

### 技术架构
- **前端框架**: Flutter
- **状态管理**: Provider
- **数据持久化**: SQLite
- **定位服务**: 原生定位 API + 国内地图服务优化
- **AI 集成**: 支持多种 AI 服务调用与降级策略

### 项目结构
```
lib/
├── constants/       # 常量定义
├── models/          # 数据模型
├── providers/       # 状态管理
├── screens/         # 页面组件
├── services/        # 业务逻辑服务
├── utils/           # 工具函数
└── widgets/         # 通用UI组件
```

## 核心概念定义

### 1. 天气提醒（智能提醒）
- **定义**: 根据24小时天气和15日天气智能分析，总结的近3-5天提醒
- **数据来源**: WeatherAlertService智能分析生成
- **显示位置**: 
  - 今日天气页面（TodayScreen）
  - 通知栏推送
- **适用范围**: 仅当前定位城市
- **实现文件**: 
  - `lib/services/weather_alert_service.dart`
  - `lib/screens/today_screen.dart` (_buildWeatherAlertCard)
- **特点**: 
  - 基于用户设置的阈值
  - 支持通勤时段场景提醒
  - 可使用AI增强内容
  - 分析未来天气趋势

### 2. 气象预警（原始预警）
- **定义**: 天气接口API数据直接返回的官方预警信息
- **数据来源**: 天气API (`weather.current.alerts`)
- **显示位置**: 
  - 主要城市列表小卡片右上角图标
  - 城市天气详情页面右上角图标（CityWeatherTabsScreen）
- **适用范围**: 当前定位城市和所有自定义城市
- **实现文件**: 
  - `lib/main.dart` (_buildCityAlertIcon)
  - `lib/screens/city_weather_tabs_screen.dart` (_buildAlertIcon)
  - `lib/screens/weather_alerts_screen.dart`
- **特点**: 
  - 官方气象部门发布
  - 实时更新
  - 所有城市通用

### 3. 通勤提醒（通勤建议）
- **定义**: 每日通勤时段的出行建议
- **数据来源**: CommuteAdviceService生成（AI优先，规则引擎备用）
- **显示位置**: 
  - 今日天气页面（TodayScreen）
  - App启动时弹窗提醒
- **适用范围**: 仅当前定位城市
- **时段设置**: 在"天气提醒设置"中配置
  - 默认早高峰: 07:00 - 09:00
  - 默认晚高峰: 17:30 - 19:30
  - 可自定义时间和工作日
- **实现文件**: 
  - `lib/services/commute_advice_service.dart`
  - `lib/widgets/commute_advice_widget.dart`
  - `lib/providers/weather_provider.dart` (checkAndGenerateCommuteAdvices)
- **特点**: 
  - 按时段生成（早高峰/晚高峰）
  - 每个时段只生成一次
  - 基于当前天气和24小时预报
  - 包含级别系统（严重/警告/提示/普通）
  - 保留15天历史记录
  - 时段结束自动清理

#### 通勤提醒AI提示词规范

**内容要求**：
- **只包含两项建议**: 防雨 + 着装
- **防雨建议**: 只有下雨/雨雪天气时才建议带伞，其他天气（晴天/阴天/雾霾）不建议带伞
- **着装建议**: 根据温度给出具体衣物搭配（如：长袖衬衫+薄外套、羽绒服+保暖内衣、短袖T恤）
- **字数要求**: 总字数60-80字，每条建议≤25字
- **语言风格**: 亲切、口语化，先结论再理由

**输出格式**：
```
🌞 早安！今天早高峰通勤建议——
🌂 防雨：降水概率低，无需带伞。
👔 着装：薄长袖+防晒衫，舒适透气。
```

**严格要求**：
1. 第1行：问候语 + 时段 + "通勤建议——"
2. 第2行：防雨建议（🌂 开头）
3. 第3行：着装建议（👔 开头）
4. 不要添加其他内容（如鞋履、防晒、空气、交通、彩蛋等）
5. 建议之间不加空行
6. 不要在开头或结尾添加额外空行

**实现位置**：
- `lib/services/ai_service.dart` - `buildCommutePrompt()` 方法
- `lib/services/ai_service.dart` - `buildOptimizedCommutePrompt()` 方法

## 页面预警显示规则

### 今日天气页面（TodayScreen）
- 显示：天气提醒（智能提醒）
- 显示：通勤提醒（通勤建议）
- 不显示：气象预警

### 主要城市列表页面（MainScreen）
- 显示：气象预警（卡片右上角图标）
- 不显示：天气提醒
- 不显示：通勤提醒

### 城市天气详情页面（CityWeatherTabsScreen）
- 显示：气象预警（右上角图标）
- 不显示：天气提醒
- 不显示：通勤提醒

## 代码规范

### 命名约定
- 气象预警: `originalAlerts`, `alerts` (来自API)
- 天气提醒: `smartAlerts`, `weatherAlerts` (智能分析)
- 通勤提醒: `commuteAdvices`

### 方法命名
- 分析天气生成提醒: `analyzeWeather()` → 生成天气提醒
- 检查通勤时段: `isInCommuteTime()` → 判断通勤提醒
- 获取原始预警: `weather.current?.alerts` → 气象预警

### 注释规范
在处理预警相关代码时，请明确注释是哪种类型：
```dart
// 获取气象预警（原始预警，来自天气API）
final originalAlerts = weather?.current?.alerts;

// 获取天气提醒（智能分析生成）
final smartAlerts = alertService.getAlertsForCity(cityName, location);

// 获取通勤提醒（通勤时段建议）
final commuteAdvices = weatherProvider.commuteAdvices;
```

## 用户设置相关

### 天气提醒设置（WeatherAlertSettings）
- 启用必须提醒开关
- 启用场景提醒开关
- 启用通勤提醒开关
- 空气质量阈值
- 温度阈值
- 通勤时间设置（早高峰、晚高峰）
- 工作日设置

### 通勤时间判断
- 读取用户设置: `WeatherAlertService.instance.settings.commuteTime`
- 检查时段: `CommuteAdviceService.isInCommuteTime()`
- 不要硬编码时间，必须从设置读取

## AI使用规则

### AI调用场景
- ✅ 天气提醒: 重要提醒（红色预警）和场景提醒使用AI增强
- ✅ 通勤提醒: AI优先生成，失败降级到规则引擎
- ✅ 智能摘要: 今日天气页面顶部的AI摘要
- ✅ 城市天气AI总结: 24小时和15日天气趋势分析
- ✅ 15日预报AI总结: 未来半月天气趋势
- ❌ 气象预警: 不使用AI，直接展示API数据

### AI降级策略
1. AI调用失败 → 使用规则引擎/默认文案
2. 超时（15秒）→ 使用备用方案
3. 网络异常 → 使用本地规则

### AI渐进式展示
使用 `AIContentWidget` 组件实现渐进式展示：

**展示流程**：
1. **立即显示** - 卡片框架和标题（0ms）
2. **骨架屏** - 显示加载动画（0-2秒）
3. **内容渐入** - AI内容从下往上渐入，透明度0→1（300-500ms）
4. **失败降级** - 显示默认内容 + 重试按钮

**组件使用**：
```dart
AIContentWidget(
  title: '15日天气趋势',
  icon: Icons.trending_up,
  fetchAIContent: () async {
    if (weatherProvider.forecast15dSummary != null) {
      return weatherProvider.forecast15dSummary!;
    }
    await weatherProvider.generateForecast15dSummary();
    return weatherProvider.forecast15dSummary ?? '';
  },
  defaultContent: '未来半月天气平稳，温度变化不大，适合安排户外活动。',
)
```

**已应用页面**：
- ✅ 城市天气AI总结（24小时）
- ✅ 城市天气AI总结（15日）
- ✅ 15日预报页面AI总结
- ✅ 今日天气页面AI智能助手

### AI卡片统一样式规范

所有AI卡片（包括AIContentWidget和AISmartAssistantWidget）应遵循统一的Material Design 3样式规范：

#### 1. 标准AI卡片样式（AIContentWidget）

**外层卡片**：
```dart
Card(
  elevation: AppColors.cardElevation,              // 阴影高度（2-4）
  shadowColor: AppColors.cardShadowColor,          // 阴影颜色
  color: AppColors.materialCardColor,              // 背景色（自适应主题）
  surfaceTintColor: Colors.transparent,            // 禁用 MD3 默认的表面着色
  shape: AppColors.cardShape,                      // 圆角（8px）
  child: Padding(
    padding: const EdgeInsets.all(16),             // 标准内边距 16px
    child: Column(...),
  ),
)
```

**标题栏**：
- 图标：`AppColors.accentBlue`（主题蓝色）
- 文字：`AppColors.textPrimary`（主要文字色），加粗
- AI标签：金琥珀色#FFB300（暗色）/ 蓝色#004CFF（亮色），半透明背景0.15

**AI标签样式**：
```dart
Container(
  padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
  decoration: BoxDecoration(
    color: (themeProvider.isLightTheme 
      ? const Color(0xFF004CFF)      // 亮色模式：蓝色
      : const Color(0xFFFFB300))     // 暗色模式：金琥珀色
      .withValues(alpha: 0.15),
    borderRadius: BorderRadius.circular(4),
  ),
  child: Row(
    mainAxisSize: MainAxisSize.min,
    children: [
      Icon(Icons.auto_awesome, 
        color: themeProvider.isLightTheme 
          ? const Color(0xFF004CFF) 
          : const Color(0xFFFFB300), 
        size: 10),
      const SizedBox(width: 2),
      Text('AI', 
        style: TextStyle(
          color: themeProvider.isLightTheme 
            ? const Color(0xFF004CFF) 
            : const Color(0xFFFFB300),
          fontSize: 10, 
          fontWeight: FontWeight.bold)),
    ],
  ),
)
```

**内容区域**：
- 文字颜色：`AppColors.textPrimary`
- 字号：14px
- 行高：1.5
- 字重：`FontWeight.w600`（AI内容加粗）
- 渐进式展示：骨架屏 → AI内容渐入 → 失败降级
- 错误/默认内容：`FontWeight.w500`（中等粗细）

#### 2. AI智能助手卡片样式（AISmartAssistantWidget）

**⚠️ 统一规范**：AISmartAssistantWidget 应使用与 AIContentWidget 相同的标准卡片样式，不使用特殊渐变背景。

**外层卡片**：
- 与 AIContentWidget 保持一致
- 使用标准 Material Card 背景（`AppColors.materialCardColor`）
- 不使用深紫到深蓝的渐变背景
- 不使用金色光晕阴影

**内部小卡片（天气摘要、通勤提醒）**：
- 背景色：橙色系（天气摘要）、绿色系（通勤提醒）
- 半透明度：亮色 0.15，暗色 0.25
- 圆角：12px
- 边框：无边框或半透明边框
- 阴影：浮起效果，黑色半透明
- 图标和文字颜色：
  - 亮色模式：主题深蓝 #012d78
  - 暗色模式：白色

**AI标签样式**：
- 与 AIContentWidget 保持一致
- 金琥珀色#FFB300（暗色）/ 蓝色#004CFF（亮色）

#### 3. AI卡片颜色规范

**标题图标颜色**：
- 统一使用 `AppColors.accentBlue`（主题蓝色）

**AI标签颜色**：
- 原色：`Color(0xFFFFB300)` - 金琥珀色
- 反色：`Color(0xFF004CFF)` - 蓝色
- 亮色模式：使用反色（蓝色），提高对比度
- 暗色模式：使用原色（金琥珀色）

**内部小卡片颜色**：
- 天气摘要：橙色系 `Color(0xFFFFB74D)`，半透明 0.15-0.25
- 通勤提醒：绿色系 `Color(0xFF64DD17)`，半透明 0.15-0.25
- ⚠️ 避免使用蓝色系（对比度不足）

**文字颜色**：
- 亮色模式：主题深蓝 `Color(0xFF012d78)` 或 `AppColors.textPrimary`
- 暗色模式：白色 `Colors.white` 或 `AppColors.textPrimary`

**字体粗细**：
- AI内容文字：`FontWeight.w600`（加粗，易读性更好）
- 标题文字：`FontWeight.bold` 或 `FontWeight.w600`
- AI标签文字：`FontWeight.bold`
- 小卡片标题：`FontWeight.w600`
- 小卡片内容：`FontWeight.w600`（AI内容加粗）

#### 4. AI卡片适用范围

- ✅ AIContentWidget（标准AI卡片）
- ✅ AISmartAssistantWidget（今日天气页面AI助手）
- ✅ 城市天气AI总结（24小时）
- ✅ 城市天气AI总结（15日）
- ✅ 15日预报页面AI总结

#### 5. AI卡片设计原则

1. **统一性**：所有AI卡片使用统一的 Material Design 3 样式
2. **主题适配**：支持亮色/暗色模式自适应
3. **渐进式展示**：提供良好的加载体验
4. **降级策略**：AI失败时显示默认内容和重试按钮
5. **可识别性**：通过AI标签明确标识AI生成内容
6. **层次分明**：通过透明度和阴影区分层次
7. **避免过度设计**：不使用复杂的渐变背景和特殊效果
8. **字体加粗**：AI生成的内容文字使用 `FontWeight.w600` 加粗，提高易读性和识别度

#### 6. 实现文件

- `lib/widgets/ai_content_widget.dart` - 标准AI卡片组件
- `lib/widgets/ai_smart_assistant_widget.dart` - 今日天气AI助手组件
- `lib/screens/city_weather_tabs_screen.dart` - 城市天气AI总结
- `lib/screens/forecast15d_screen.dart` - 15日预报AI总结

## AI增强功能

### 1. 智能穿搭顾问 👔

#### 功能描述
根据当前天气和未来24小时天气变化，AI生成专业穿搭建议。

#### 数据来源
- 当前天气：温度、体感、风力、湿度
- 24小时预报：温度变化趋势
- 15日预报：今日温度范围

#### 建议内容
- **核心推荐**: 今日穿搭核心要点
- **上装建议**: 外套、衬衫、T恤等材质和款式
- **下装建议**: 裤装、裙装等材质和款式
- **配饰推荐**: 帽子、围巾、墨镜、雨具等
- **色彩搭配**: 适合今日天气的色彩方案
- **特别提示**: 天气变化注意事项

#### 实现文件
- `lib/screens/outfit_advisor_screen.dart`
- `lib/services/ai_service.dart` (buildOutfitAdvisorPrompt)

#### 特点
- AI生成，每次不同
- 考虑温度变化和体感差异
- 雨天必提醒雨具
- 温差大提醒分层穿搭
- 200-250字精准建议
- 支持Markdown格式渲染

### 2. 健康管家 💝

#### 功能描述
根据天气和空气质量，为不同人群（一般人群、老年人、儿童、过敏体质）提供健康建议。

#### 数据来源
- 天气数据：温度、体感、湿度、风力
- 空气质量：AQI、等级

#### 人群分类
- **一般人群**: 常规健康建议
- **老年人**: 关注心血管、呼吸系统、关节
- **儿童**: 关注免疫力、皮肤、呼吸道
- **过敏体质**: 关注过敏源、空气质量、花粉

#### 建议内容
- **健康风险提示**: 主要健康风险
- **出行建议**: 户外活动建议、最佳时段
- **饮食建议**: 饮食和补水方案
- **防护措施**: 口罩、防晒、保暖等
- **特殊提醒**: 针对人群的特别注意事项

#### 实现文件
- `lib/screens/health_advisor_screen.dart`
- `lib/services/ai_service.dart` (buildHealthAdvisorPrompt)

#### 特点
- 支持4类人群
- 针对性健康建议
- AQI>100提醒减少户外
- 温差>10℃提醒预防感冒
- 180-220字专业建议
- 支持Markdown格式渲染

### 3. 异常天气预警 ⚠️

#### 功能描述
AI分析当前天气是否存在异常，评估风险等级，给出安全建议。

#### 数据来源
- 当前天气：天气状况、温度、风力、能见度
- 官方预警：气象部门发布的预警信息
- 24小时预报：未来天气变化

#### 预警内容
- **天气异常判断**: 是否存在异常天气
- **风险等级**: 高危/中危/低危/正常
- **主要风险**: 安全风险点
- **安全建议**: 防范措施和行动建议
- **紧急提醒**: 高危天气的紧急提醒

#### 风险等级标准
- **高危**: 暴雨、暴雪、雷暴
- **中危**: 大雨、大雪、7级以上大风
- **低危**: 中雨、中雪、浓雾、高温>38℃、低温<-10℃
- **正常**: 其他情况

#### 实现文件
- `lib/screens/extreme_weather_alert_screen.dart`
- `lib/services/ai_service.dart` (buildExtremeWeatherAlertPrompt)

#### 特点
- 整合官方预警
- AI智能分析
- 风险等级可视化
- 150-200字精准预警
- 安全相关，刚需功能
- 支持Markdown格式渲染

## 浮动操作岛

### 设计理念
浮动操作岛是一个可展开的多功能快捷入口，替代单一的刷新按钮，提供更丰富的交互体验。

### 核心组件
**`FloatingActionIsland`** - 浮动操作岛组件

### 特性
1. **收起状态** - 显示主图标（默认菜单图标）
2. **展开状态** - 从下往上展开显示多个操作按钮
3. **遮罩层** - 展开时显示半透明遮罩，点击收起
4. **动画效果** - 缩放、渐入、旋转动画
5. **页面定制** - 每个页面可配置不同的操作列表

### 默认操作（所有页面）
- 🔄 刷新 - 刷新当前页面数据
- ⚙️ 设置 - 打开抽屉菜单
- 🌓 主题 - 切换亮色/暗色模式

### 今日天气页面专属操作
- ✨ AI助手 - 重新生成AI摘要
- 🔔 综合提醒 - 查看天气提醒和通勤建议
- 📤 分享天气 - 分享当前天气
- 👔 穿搭顾问 - AI智能穿搭建议
- 💝 健康管家 - 健康建议（支持老人、儿童、过敏体质）
- ⚠️ 异常预警 - 异常天气安全提醒

### 使用示例
```dart
FloatingActionIsland(
  mainIcon: Icons.menu_rounded,
  mainTooltip: '快捷操作',
  actions: [
    IslandAction(
      icon: Icons.refresh_rounded,
      label: '刷新天气',
      onTap: () => _handleRefresh(),
      backgroundColor: AppColors.primaryBlue,
      iconColor: Colors.white,
    ),
    // 更多操作...
  ],
)
```

### 已实现页面
所有一级页面（底部导航栏页面）都已集成浮动操作岛：
- ✅ **今日天气**: 刷新、设置、主题、AI助手、综合提醒、分享、穿搭顾问、健康管家、异常预警（9个功能）
- ✅ **24小时天气**: 刷新、设置、主题
- ✅ **15日预报**: 刷新、设置、主题
- ✅ **主要城市**: 刷新、设置、主题（通过MainScreen统一管理）

### 视觉特性
- **半透明效果**: 主按钮和操作按钮均采用95%不透明度，带白色半透明边框
- **双层阴影**: 彩色主阴影 + 白色高光阴影，增强立体感
- **流畅动画**: 主按钮45度旋转，操作按钮缩放渐入，展开时间300ms
- **圆形设计**: 主按钮和操作按钮均为圆形，更加简洁现代
- **智能透明度**: 
  - 展开时：100%不透明
  - 收起静止时：15%透明（半透明）
  - 收起滚动时：5%透明（几乎隐形）
  - 滚动停止500ms后自动恢复
- **统一图标**: 所有操作按钮图标统一使用白色，风格一致
- **统一配色**: 所有操作按钮背景统一使用主题蓝色（AppColors.primaryBlue）
- **智能标签**: 暗色模式下标签背景与对应按钮背景色保持一致，亮色模式使用卡片背景色
- **位置优化**: 浮动岛位于右下角（right: 16px, bottom: 72px），接近底部导航栏上方

## 小组件数据更新规则

### ⚠️ 重要：小组件只显示当前定位的天气数据

小组件应该始终显示当前定位的天气数据，而不是城市天气页面的数据。

#### 更新规则：
```dart
// ✅ 正确：使用当前定位的数据
_widgetService.updateWidget(
  weatherData: _currentLocationWeather!,
  location: _originalLocation!,
);

// ❌ 错误：使用当前显示的数据（可能是城市数据）
_widgetService.updateWidget(
  weatherData: _currentWeather!,
  location: _currentLocation!,
);
```

#### 实现位置：
- `weather_provider.dart` 的 `_refreshLocationAndWeather()` 方法
- `weather_provider.dart` 的 `refreshWeatherData()` 方法
- `weather_provider.dart` 的 `forceRefreshWithLocation()` 方法

#### 关键变量：
- `_currentLocationWeather`: 当前定位的天气数据（永远不变）
- `_originalLocation`: 当前定位的位置信息（永远不变）
- `_currentWeather`: 当前显示的天气数据（可能是定位数据或城市数据）
- `_currentLocation`: 当前显示的位置信息（可能是定位位置或城市位置）
- `_isShowingCityWeather`: 标记当前是否显示城市数据

## 数据库表结构

### weather_alerts（天气提醒）
- 存储WeatherAlertService生成的智能提醒
- 只存储当前定位城市的提醒

### commute_advices（通勤提醒）
- 存储通勤时段的出行建议
- 包含level字段（严重/警告/提示/普通）
- 保留15天历史记录

### weather_cache（天气数据缓存）
- 包含current.alerts（气象预警）
- 所有城市的天气数据

## 天气数据结构样例

### 完整天气API响应结构
```json
{
  "code": 200,
  "message": "successful",
  "data": {
    "current": {
      // 当前天气数据
      "current": {
        "temperature": "15",           // 温度
        "weather": "小雨",             // 天气现象
        "weatherIndex": "07",          // 天气代码
        "weatherPic": "n07",           // 天气图标
        "humidity": "100",             // 湿度
        "winddir": "东风",             // 风向
        "windpower": "1级",            // 风力
        "feelstemperature": "16",      // 体感温度
        "airpressure": "954",          // 气压
        "visibility": "20.1",          // 能见度
        "reporttime": "21:10"          // 报告时间
      },
      
      // 空气质量
      "air": {
        "AQI": "12",                   // AQI数值
        "levelIndex": "优"             // 质量等级
      },
      
      // 气象预警（原始预警，来自天气API）
      "alerts": [
        {
          "alertid": "61000041600000_202510091940316_1011108010005",
          "publishTime": "2025-10-09 19:40:26",
          "city": "汉中",
          "provice": "陕西",
          "type": "地质灾害气象风险",      // 预警类型
          "level": "橙色",                // 预警级别
          "levelNumber": "03",            // 级别代码
          "typeNumber": "00",             // 类型代码
          "alertPic": "icon_warning_0003.png",
          "content": "省自然资源厅联合省气象局..."  // 预警内容
        }
      ],
      
      // 农历和天气提示
      "nongLi": "2025-10-11  星期六  八月二十",
      "tips": "明天白天有雨，请提前计划行程"
    },
    
    // 24小时天气预报
    "forecast24h": [
      {
        "forecasttime": "22:00",       // 预报时间
        "temperature": "16℃",          // 温度
        "weather": "中雨",             // 天气
        "weatherCode": "08",           // 天气代码
        "weatherPic": "n08",           // 天气图标
        "windDir": "西北风",           // 风向
        "windPower": "2级",            // 风力
        "windDirectionDegree": "315"   // 风向角度
      }
      // ... 共24条
    ],
    
    // 15日天气预报
    "forecast15d": [
      {
        "forecasttime": "10/10",       // 日期
        "week": "周五",                // 星期
        "reporttime": "2025-10-11 18:00:00.0",
        
        // 上午天气
        "weather_am": "小雨",
        "weather_index_am": "07",
        "weather_am_pic": "d07",
        "temperature_am": "23",        // 上午温度
        "winddir_am": "东北风",
        "windpower_am": "4级",
        
        // 下午天气
        "weather_pm": "大雨",
        "weather_index_pm": "09",
        "weather_pm_pic": "n09",
        "temperature_pm": "17",        // 下午温度
        "winddir_pm": "西北风",
        "windpower_pm": "4级",
        
        // 日出日落
        "sunrise_sunset": "06:53|18:25"
      }
      // ... 共15条
    ]
  }
}
```

### 天气代码对照表
```
00 - 晴
01 - 多云
02 - 阴
03 - 阵雨
07 - 小雨
08 - 中雨
09 - 大雨
10 - 暴雨
11 - 大暴雨
13 - 雷阵雨
14 - 雨夹雪
19 - 小雪
20 - 中雪
21 - 大雪
26 - 雾
29 - 霾
53 - 浮尘
54 - 扬沙
55 - 沙尘暴
```

### 预警级别对照
- **红色预警**: 最高级别，极其危险
- **橙色预警**: 高级别，非常危险
- **黄色预警**: 中级别，需要注意
- **蓝色预警**: 低级别，一般关注

### 数据使用规范

#### 访问当前天气
```dart
final current = weather.current?.current;
final temperature = current?.temperature;  // "15"
final weatherType = current?.weather;      // "小雨"
```

#### 访问气象预警（原始预警）
```dart
final alerts = weather.current?.alerts;    // 来自API的官方预警
if (alerts != null && alerts.isNotEmpty) {
  final firstAlert = alerts[0];
  final level = firstAlert.level;          // "橙色"
  final type = firstAlert.type;            // "地质灾害气象风险"
}
```

#### 访问24小时预报
```dart
final hourly = weather.forecast24h;
if (hourly != null && hourly.isNotEmpty) {
  final nextHour = hourly[0];
  final temp = nextHour.temperature;       // "16℃"
  final weather = nextHour.weather;        // "中雨"
}
```

#### 访问15日预报
```dart
final forecast15d = weather.forecast15d;
if (forecast15d != null && forecast15d.isNotEmpty) {
  final day = forecast15d[0];
  final amWeather = day.weather_am;        // "小雨"
  final pmWeather = day.weather_pm;        // "大雨"
  final tempAm = day.temperature_am;       // "23"
  final tempPm = day.temperature_pm;       // "17"
}
```

### ⚠️ 注意事项

1. **温度单位**: 24小时预报带"℃"，15日预报不带单位，只要温度带单位就是℃
2. **天气图标**: 日间用`d`前缀，夜间用`n`前缀（如`d07`、`n07`）
3. **字段命名**: 15日预报使用下划线（如`weather_am`），24小时使用驼峰命名（如`weatherCode`）
4. **null安全**: 所有字段都可能为null，使用时需要安全访问（`?.`）
5. **气象预警**: 只有当地气象部门发布时才有数据，平时可能为空数组

## 重要数据模型定义

### LocationModel（定位模型）

**文件位置**: `lib/models/location_model.dart`

**完整定义**:
```dart
@JsonSerializable()
class LocationModel {
  final String address;        // 完整地址
  final String country;        // 国家
  final String province;       // 省份
  final String city;           // 城市
  final String district;       // 区县
  final String street;         // 街道
  final String adcode;         // 行政区划代码
  final String town;           // 乡镇
  final double lat;            // 纬度
  final double lng;            // 经度
  bool isProxyDetected;        // 是否检测到代理/VPN

  LocationModel({
    required this.address,
    required this.country,
    required this.province,
    required this.city,
    required this.district,
    required this.street,
    required this.adcode,
    required this.town,
    required this.lat,
    required this.lng,
    this.isProxyDetected = false,
  });
}
```

**关键字段说明**:
- `district`: 最重要的字段，用于城市匹配和显示
- `city`: 城市名称，用于天气API查询
- `province`: 省份，用于更精确的定位
- `lat/lng`: 经纬度坐标，用于精确定位
- `adcode`: 行政区划代码，用于城市数据匹配
- `isProxyDetected`: 代理检测标志，影响定位准确性

**常用访问方式**:
```dart
// 获取显示名称（优先级：district > city > province）
String getDisplayName() {
  if (district.isNotEmpty) return district;
  if (city.isNotEmpty) return city;
  return province;
}

// 获取城市ID（用于天气API）
String getCityId() => adcode;

// 检查定位是否有效
bool isValid() => lat != 0 && lng != 0 && district.isNotEmpty;
```

**使用场景**:
- 当前定位城市显示
- 天气数据查询
- 城市列表匹配
- 定位服务回调

**注意事项**:
- 所有字符串字段都可能为空，使用时需要检查
- `lat/lng` 为 0 表示定位失败
- `isProxyDetected` 为 true 时定位可能不准确
- `toString()` 方法返回简化格式：`LocationModel(district: xxx, city: xxx, province: xxx)`

## 重要提醒

❗ 开发时请注意区分这三个概念，不要混淆：
- 城市详情页面右上角 = 气象预警（API数据）
- 今日天气页面提醒卡片 = 天气提醒（智能分析）
- 今日天气页面通勤卡片 = 通勤提醒（时段建议）

## UI样式规范

### Material Design 3 (MD3) 设计规范

本项目遵循 Material Design 3 设计规范，所有卡片组件应当符合以下 MD3 标准：

#### MD3 卡片规范
1. **卡片类型**: 使用 Elevated Card（带阴影的卡片）
2. **圆角**: 使用 `borderRadius: 8px`（MD3 标准中等圆角）
3. **阴影**: 使用 `elevation: 2-4`（轻度阴影）
4. **屏幕边距**: 卡片左右边距 `12px`（`AppConstants.screenHorizontalPadding`）
   - 符合 MD3 紧凑布局标准
   - 为内容提供足够的呼吸空间
   - 避免内容过于贴边
5. **卡片间距**: 卡片之间保持 `12px` 垂直间距（`AppColors.cardSpacing`）
6. **内边距**: 卡片内部内容距离边缘 `12-16px`
   - 标准卡片：`16px`
   - 图表卡片：`12px`（为图表留更多空间）
7. **色彩系统**: 
   - 背景色自适应主题（亮色/暗色）
   - 使用半透明背景（亮色 15-25%，暗色 25-40%）
8. **交互反馈**: 可点击卡片使用 InkWell 提供涟漪效果
9. **无边框**: 内部小卡片原则上不使用边框（依靠透明度区分层次）
10. **⚠️ 配色约束**: 大卡片内部小卡片**不使用蓝色系**（因为暗色模式App背景是深蓝色，蓝色系对比度不足）

#### MD3 透明度层次规范
- **大卡片背景**: 半透明白色（亮色：白色，暗色：25% 白色）
- **小卡片背景**: 
  - 亮色模式: `0.15`
  - 暗色模式: `0.25`
- **图标/标签容器背景**:
  - 亮色模式: `0.2`
  - 暗色模式: `0.3`
- **边框颜色**: `0.15-0.2`（如需使用）

### 标准卡片样式规范（符合 MD3）

#### 1. 外层大卡片（包含图表、详细信息等所有卡片）
**外层结构**:
```dart
Padding(
  padding: const EdgeInsets.symmetric(
    horizontal: AppConstants.screenHorizontalPadding,  // 左右边距（12px，符合MD3紧凑布局）
  ),
  child: Card(
    elevation: AppColors.cardElevation,              // 阴影高度（2-4）
    shadowColor: AppColors.cardShadowColor,          // 阴影颜色
    color: AppColors.materialCardColor,              // 背景色（自适应主题）
    surfaceTintColor: Colors.transparent,            // 禁用 MD3 默认的表面着色
    shape: AppColors.cardShape,                      // 圆角（8px）
    child: Padding(
      padding: const EdgeInsets.all(16),             // 内边距（标准：16px，图表可用12px）
      child: Column(...),
    ),
  ),
)
```

**卡片边距规范**:
- **左右边距**: `12px` (`AppConstants.screenHorizontalPadding`)
  - 符合 Material Design 3 紧凑布局标准
  - 为内容提供足够的呼吸空间
  - 避免内容过于贴边
- **卡片间距**: 使用 `AppColors.cardSpacingWidget` 分隔卡片（12px）
  - 垂直间距保持一致性
  - 符合 MD3 最小推荐间距

#### 2. 卡片标题栏
```dart
Row(
  children: [
    Icon(
      Icons.info_outline,                        // 标题图标
      color: AppColors.accentBlue,               // 图标颜色
      size: AppConstants.sectionTitleIconSize,   // 图标大小
    ),
    const SizedBox(width: 8),                    // 图标与文字间距
    Text(
      '详细信息',
      style: TextStyle(
        color: AppColors.textPrimary,            // 标题颜色
        fontSize: AppConstants.sectionTitleFontSize,  // 标题字号
        fontWeight: FontWeight.bold,             // 标题粗细
      ),
    ),
  ],
)
```
- **标题下方间距**: `16px`

#### 3. 内部小卡片容器
- **布局**: 两列布局
- **列间距**: `4px`
- **行间距**: `4px`
- **圆角**: `borderRadius: 4px`
- **背景色**: 
  - **亮色模式**: 使用深色模式的背景色（简单方案）
    - 第一列: 橙色 `#FFB74D`，半透明 `0.25`
    - 第二列: 绿色 `#64DD17`，半透明 `0.25`
    - 节气卡片: 琥珀金 `#FFB300`，半透明 `0.25`
    - 今日提示（城市天气）: 主题深蓝 `#012d78` / 橄榄绿 `#6B8E23`，半透明 `0.25`
  - **暗色模式**: 使用半透明背景
    - 透明度: `0.25`
- **边框**: 无边框
- **内边距**: `vertical: 12px, horizontal: 14px`
- **浮起效果**: 添加阴影让小卡片浮在大卡片之上
  - 阴影颜色: 亮色模式 `Colors.black.withOpacity(0.08)`，暗色模式 `Colors.black.withOpacity(0.15)`
  - 模糊半径: `6`
  - 偏移量: `Offset(0, 2)`
  - 扩散半径: `0`
- **图标和文字颜色**:
  - 亮色模式: 图标主题深蓝 `Color(0xFF012d78)`，文字主题深蓝
  - 暗色模式: 图标白色 `Colors.white`，文字白色
  - 背景色: 保持橙色 `#FFB74D` / 绿色 `#64DD17` / 琥珀金 `#FFB300` 的半透明效果

#### 4. 小卡片内图标/标签容器
```dart
Container(
  padding: const EdgeInsets.all(6),             // 正方形内边距
  decoration: BoxDecoration(
    color: iconColor.withOpacity(
      themeProvider.isLightTheme ? 0.2 : 0.3    // 透明度
    ),
    borderRadius: BorderRadius.circular(4),     // 圆角
  ),
  child: Icon(
    item.icon,
    color: iconColor,                           // 图标颜色
    size: 16,                                   // 图标大小
  ),
)
```
- **与标签文字间距**: `8px`

#### 5. 小卡片内文字样式
**标签文字**:
```dart
Text(
  item.label,
  style: TextStyle(
    color: AppColors.textSecondary,             // 次要文字颜色
    fontSize: 13,                               // 字号
    fontWeight: FontWeight.w500,                // 字重
    letterSpacing: 0.2,                         // 字间距
  ),
)
```

**数值文字**:
```dart
Text(
  item.value,
  style: TextStyle(
    color: AppColors.textPrimary,               // 主要文字颜色
    fontSize: 16,                               // 字号
    fontWeight: FontWeight.w600,                // 字重
    height: 1.2,                                // 行高
  ),
)
```
- **标签与数值间距**: `8px`

#### 6. 图表卡片特殊说明
**图表卡片样式**（温度趋势图、15日图表等）:
```dart
Padding(
  padding: const EdgeInsets.symmetric(
    horizontal: AppConstants.screenHorizontalPadding,
  ),
  child: Card(
    elevation: AppColors.cardElevation,
    shadowColor: AppColors.cardShadowColor,
    color: AppColors.materialCardColor,
    shape: AppColors.cardShape,
    child: Padding(
      padding: const EdgeInsets.all(12),        // 图表卡片使用 12px 内边距
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // 标题栏（与其他卡片一致）
          Row(
            children: [
              Icon(
                Icons.show_chart,
                color: AppColors.accentBlue,
                size: AppConstants.sectionTitleIconSize,
              ),
              const SizedBox(width: 8),
              Text(
                '7日温度趋势',
                style: TextStyle(
                  color: AppColors.textPrimary,
                  fontSize: AppConstants.sectionTitleFontSize,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),            // 标题与图表间距
          SizedBox(
            height: 220,                         // 图表固定高度
            child: WeatherChart(...),
          ),
        ],
      ),
    ),
  ),
)
```
- **图表内边距**: `12px`（比标准卡片少 4px，为图表留更多空间）
- **标题与图表间距**: `8px`（比标准卡片少 8px）
- **图表高度**: `220px`（7日趋势）或 `280px`（15日趋势）

#### 7. 适用范围
此样式规范适用于以下所有卡片组件：
- ✅ 详细信息卡片 (`WeatherDetailsWidget`)
- ✅ 生活指数卡片 (`LifeIndexWidget`)
- ✅ 通勤提醒卡片 (`CommuteAdviceWidget`)
- ✅ 天气提醒卡片 (`WeatherAlertWidget`)
- ✅ 空气质量卡片 (`_buildAirQualityCard`)
- ✅ 天气提示卡片 (`_buildWeatherTipsCard`)
- ✅ 今日天气提示项 (`_buildTipItem`)
- ✅ 时段卡片 (`_buildPeriodCard`)
- ✅ 温度趋势图 (`_buildTemperatureChart`)
- ✅ 15日温度趋势 (`Forecast15dChart`)
- ✅ 24小时天气 (`HourlyWeatherWidget`)
- ✅ 农历信息 (`LunarInfoWidget`)
- ✅ 日月信息 (`SunMoonWidget`)
- ✅ 即将到来的节气 (`SolarTermListWidget`)

#### 8. 特殊卡片颜色配置

**简单方案：亮色模式使用深色模式的背景色，主题深蓝字**

**详细信息、生活指数、农历信息小卡片**:
- **亮色模式**: 
  - 背景色: 第一列橙色 `#FFB74D`，第二列绿色 `#64DD17`，半透明 `0.25`
  - 图标颜色: 主题深蓝 `Color(0xFF012d78)`
  - 文字颜色: 主题深蓝 `Color(0xFF012d78)`
- **暗色模式**: 
  - 背景色: 橙色/绿色半透明 `0.25`
  - 图标颜色: 白色 `Colors.white`
  - 文字颜色: 白色

**节气小卡片**:
- **亮色模式**: 
  - 背景色: 太阳红 `#E53935`，半透明 `0.25`
  - 图标颜色: 主题深蓝 `Color(0xFF012d78)`
  - 文字颜色: 主题深蓝 `Color(0xFF012d78)`
- **暗色模式**: 
  - 背景色: 琥珀金 `#FFB300`，半透明 `0.25`
  - 图标颜色: 白色 `Colors.white`
  - 文字颜色: 白色

**宜忌提醒小卡片**（与节气小卡片风格一致）:
- **亮色模式**: 
  - 背景色: 宜绿色、忌红色、吉日橙色，半透明 `0.25`
  - 图标颜色: 主题深蓝 `Color(0xFF012d78)`
  - 文字颜色: 主题深蓝 `Color(0xFF012d78)`
- **暗色模式**: 
  - 背景色: 宜绿色、忌红色半透明 `0.25`；**黄道吉日琥珀金 `#FFB300`**
  - 图标颜色: 白色 `Colors.white`
  - 文字颜色: 白色
- 无边框，带浮起效果，图标大小 `16px`

**今日提示小卡片**（城市天气）:
- **亮色模式**: 
  - 背景色: 第一列主题深蓝 `#012d78`，第二列橄榄绿 `#6B8E23`，半透明 `0.25`
  - 图标颜色: 主题深蓝 `Color(0xFF012d78)`
  - 文字颜色: 主题深蓝 `Color(0xFF012d78)`
- **暗色模式**: 
  - 背景色: 橙色/绿色半透明 `0.25`
  - 图标颜色: 白色 `Colors.white`
  - 文字颜色: 白色

**通勤提醒级别小卡片配色**（着重提醒设计）:
- **亮色模式**: 
  - 背景: **主题浅蓝色渐变**（带透明度，着重提醒）
    - 渐变方向: `topLeft → bottomRight`
    - 起始色: `#E1F5FE`，25% 透明度 (`0x40E1F5FE`)
    - 结束色: `#81D4FA`，38% 透明度 (`0x6081D4FA`)
  - 边框: 级别色边框，宽度 `1px`
  - 文字颜色: 级别原色（红/橙/绿/薄荷灰绿）
  - **级别标签**: Element UI dark tag 风格
    - 背景: 级别原色（不透明）
    - 文字: 白色 `Colors.white`
    - 边框: 无
    - 内边距: `horizontal: 8, vertical: 4`
- **暗色模式**: 
  - 背景色: 级别色半透明 `0.25`
  - 边框: 无边框
  - 图标颜色: 白色 `Colors.white`
  - 文字颜色: 级别原色
  - **级别标签**: Element UI plain tag 风格
    - 背景: 级别色半透明 `0.25`
    - 文字: 级别原色
    - 边框: 级别原色，宽度 `1px`
    - 内边距: `horizontal: 8, vertical: 4`

**天气提醒级别小卡片配色**（亮色模式使用深色模式的颜色）:
- 红色预警: 红色 `Colors.red`，半透明 `0.25`，主题深蓝字
- 黄色预警: 橙色 `Colors.orange`，半透明 `0.25`，主题深蓝字
- 蓝色预警: 蓝色 `Colors.blue`，半透明 `0.25`，主题深蓝字
- 信息提醒: 绿色 `Colors.green`，半透明 `0.25`，主题深蓝字

#### 9. 通勤提醒级别颜色
- 🔴 严重 (critical): `Color(0xFFD32F2F)` - 红色
- 🟠 警告 (warning): `Color(0xFFF57C00)` - 橙色
- 🟢 提示 (info): `Color(0xFF64DD17)` - 亮绿色
- 🌿 建议 (normal): `Color(0xFFB5C7C5)` - 薄荷灰绿（亮暗模式通用）

**级别标签文字颜色**：
- 亮色模式: 使用级别原色（`getLevelColor()`）
- 暗色模式: 使用级别原色（`getLevelColor()`）
- **⚠️ 已取消反色逻辑**: 小卡片背景色使用活泼半透明色配对清晰字体，级别标签不再需要反色

**AI标签颜色**（主题自适应）：
- 原色: `Color(0xFFFFB300)` - 金琥珀色
- 反色: `Color(0xFF004CFF)` - 蓝色
- 亮色模式: 使用反色（蓝色），提高对比度
- 暗色模式: 使用原色（金琥珀色）

**级别标签文字描边效果**（提高识别度）：
- 描边宽度: `0.5 pt`
- 描边模糊半径: `0.5`
- 描边颜色（主题自适应）:
  - 亮色模式: `Colors.white.withOpacity(0.4)` - 白色40%
  - 暗色模式: `Colors.black.withOpacity(0.1)` - 黑色10%
- 实现方式: 使用4个方向的`Shadow`（上下左右）模拟描边效果

**小卡片浮起效果**（增强层次感）：
- 阴影颜色（主题自适应）:
  - 亮色模式: `Colors.black.withOpacity(0.08)` - 黑色8%
  - 暗色模式: `Colors.black.withOpacity(0.15)` - 黑色15%
- 模糊半径: `6`
- 偏移量: `Offset(0, 2)` - 向下偏移2px
- 扩散半径: `0`
- 效果: 小卡片看起来浮在大卡片之上，增加层次感

#### 10. 色彩使用原则

**⚠️ 重要：避免在内部小卡片中使用蓝色系**
**⚠️ 重要：避免在设计的时候颜色写死，务必考虑亮色和暗色的情况，今日天气页面和城市天气页面头部除外**

由于暗色模式下App背景色为深蓝色（`primaryGradient`），内部小卡片使用蓝色系会导致对比度不足，难以辨识。

**推荐的小卡片颜色：**
- ✅ 橙色系：`#FFB74D`（第一列推荐）
- ✅ 绿色系：`#64DD17`（第二列推荐）
- ✅ 红色系：`#D32F2F`（警告/严重级别）
- ✅ 琥珀色：`#FFB300`（AI助手等特殊场景）
- ✅ 黄色系：`#F57C00`（警告级别）
- ❌ 蓝色系：避免使用（对比度不足）

**例外情况：**
- 仅标题栏图标可使用蓝色（如 `AppColors.accentBlue`）
- 大卡片背景（非内部小卡片）可使用蓝色

## 应用主题颜色系统

### 1. 主背景色（App全局背景）

#### 暗色模式背景
- **渐变方式**: `LinearGradient`
- **起点**: `Alignment.topLeft` (左上)
- **终点**: `Alignment.bottomRight` (右下)
- **颜色**:
  - 起始色: `Color(0xFF012d78)` - 深蓝色（#012d78）
  - 结束色: `Color(0xFF0A1B3D)` - 更深的蓝色

#### 亮色模式背景
- **渐变方式**: `LinearGradient`
- **起点**: `Alignment.topLeft` (左上)
- **终点**: `Alignment.bottomRight` (右下)
- **颜色**:
  - 起始色: `Color(0xFFF0F8FF)` - 浅蓝白色（基于#8edafc）
  - 结束色: `Color(0xFFE1F5FE)` - 极浅蓝色

### 2. 核心主题色定义（AppColors）

#### 主色调 (`primaryBlue`)
- **暗色模式**: `Color(0xFF4A90E2)` - 亮蓝色
- **亮色模式**: `Color(0xFF012d78)` - 深蓝色

#### 强调色 (`accentBlue`)
- **暗色模式**: `Color(0xFF8edafc)` - 指定的亮蓝色
- **亮色模式**: `Color(0xFF8edafc)` - 指定的亮蓝色（保持一致）

#### 文字颜色
**主要文字** (`textPrimary`):
- **暗色模式**: `Color(0xFFFFFFFF)` - 纯白色
- **亮色模式**: `Color(0xFF001A4D)` - 深蓝色，高对比度

**次要文字** (`textSecondary`):
- **暗色模式**: `Color(0xFFE8F4FD)` - 接近#8edafc的亮色
- **亮色模式**: `Color(0xFF003366)` - 深蓝色次要文字

**辅助文字** (`textTertiary`):
- **暗色模式**: `Color(0xFFB8D9F5)` - 中等亮度
- **亮色模式**: `Color(0xFF6B7280)` - 较浅的灰色

#### 背景色
**主背景** (`backgroundPrimary`):
- **暗色模式**: `Color(0xFF0A1B3D)` - 深蓝背景
- **亮色模式**: `Color(0xFFF0F8FF)` - 浅蓝白色背景

**次背景/表面** (`backgroundSecondary`/`surface`):
- **暗色模式**: `Color(0xFF1A2F5D)` - 稍亮表面
- **亮色模式**: `Color(0xFFFFFFFF)` - 纯白表面

#### 卡片相关
**卡片背景** (`materialCardColor`):
- **暗色模式**: `Color(0x25FFFFFF)` - 半透明白色（25%）
- **亮色模式**: `Color(0xFFFFFFFF)` - 纯白色

**卡片阴影** (`cardShadowColor`):
- **暗色模式**: `Colors.black.withOpacity(0.3)` - 黑色30%
- **亮色模式**: `Colors.black.withOpacity(0.1)` - 黑色10%

**卡片边框** (`cardBorder`):
- **暗色模式**: `Color(0x35FFFFFF)` - 半透明白色边框
- **亮色模式**: `Color(0xFFE1F5FE)` - 浅蓝边框

**卡片阴影高度** (`cardElevation`):
- **暗色模式**: `2` - 较明显的阴影
- **亮色模式**: `1` - 轻微阴影

#### 状态颜色
**成功色** (`success` / `accentGreen`):
- **暗色模式**: `Color(0xFF4CAF50)` - 绿色
- **亮色模式**: `Color(0xFF2E7D32)` - 深绿色

**警告色** (`warning`):
- **暗色模式**: `Color(0xFFFFB74D)` - 橙色
- **亮色模式**: `Color(0xFFE65100)` - 深橙色

**错误色** (`error`):
- **暗色模式**: `Color(0xFFFF6B6B)` - 浅红色
- **亮色模式**: `Color(0xFFD32F2F)` - 深红色

#### 温度颜色
**高温** (`highTemp`):
- **暗色模式**: `Color(0xFFFF5722)` - 橙红色
- **亮色模式**: `Color(0xFFD32F2F)` - 红色

**低温** (`lowTemp`):
- **暗色模式**: `Color(0xFF8edafc)` - 亮蓝色
- **亮色模式**: `Color(0xFF012d78)` - 主题蓝色

### 3. 颜色使用场景规范

#### 交互控件颜色选择
**Switch 开关**:
- 激活色: `AppColors.primaryBlue` (暗色=亮蓝，亮色=深蓝)

**按钮主色**:
- 主按钮: `AppColors.primaryBlue`
- 次按钮: `AppColors.textSecondary`
- 危险按钮: `AppColors.error`

**图标颜色**:
- 标题图标: `AppColors.primaryBlue` 或特定色（如通知=橙色）
- 时间图标: `AppColors.primaryBlue`
- 增减按钮: `AppColors.primaryBlue`（激活状态）

#### 卡片内部小卡片颜色规范
**第一列小卡片**:
- 推荐颜色: `Color(0xFFFFB74D)` - 橙色
- 背景透明度: 亮色 `0.15`，暗色 `0.25`
- 图标容器透明度: 亮色 `0.2`，暗色 `0.3`

**第二列小卡片**:
- 推荐颜色: `Color(0xFF64DD17)` - 绿色
- 背景透明度: 亮色 `0.15`，暗色 `0.25`
- 图标容器透明度: 亮色 `0.2`，暗色 `0.3`

**⚠️ 禁止使用蓝色系**（第一列、第二列小卡片内）

### 4. AppColors 使用指南

#### 推荐使用方式
```dart
// 方式1：使用主题扩展（最推荐）
context.appTheme.textPrimary

// 方式2：静态方法（推荐）
AppColors.of(context).textPrimary

// 方式3：全局访问（需要先调用 setThemeProvider）
AppColors.textPrimary
```

#### 在有状态组件中初始化
```dart
@override
Widget build(BuildContext context) {
  final themeProvider = context.read<ThemeProvider>();
  AppColors.setThemeProvider(themeProvider);
  // ...
}
```

#### 主题切换时自动更新
- 使用 `Consumer<ThemeProvider>` 包裹需要响应主题变化的组件
- 或在父组件中调用 `AppColors.setThemeProvider(themeProvider)`

### 5. 抽屉菜单头部颜色规范

#### 亮色模式头部渐变
```dart
LinearGradient(
  begin: Alignment.topLeft,
  end: Alignment.bottomRight,
  colors: [
    Color(0xFF64B5F6), // 浅蓝色
    Color(0xFF42A5F5), // 中蓝色
  ],
)
```
- 文字颜色: `Colors.white` (白色)

#### 暗色模式头部渐变
- 使用 `AppColors.primaryGradient`
- 文字颜色: `Colors.white` (白色)

### 6. 动态颜色选择原则

#### 需要主题适配的颜色
- ✅ 文字颜色（主要/次要/辅助）
- ✅ 背景色（主背景/次背景）
- ✅ 卡片背景和边框
- ✅ 图标颜色（交互类）
- ✅ 状态颜色（成功/警告/错误）
- ✅ Switch、Checkbox等控件激活色

#### 固定颜色（不随主题变化）
- ✅ 天气相关色（晴天黄、雨天蓝等）
- ✅ 空气质量色（优绿、良黄绿等）
- ✅ 特定级别色（通勤提醒级别）

#### 特殊适配颜色
**温度颜色**:
- 根据主题调整明暗度
- 高温: 暗色=橙红，亮色=红色
- 低温: 暗色=亮蓝，亮色=深蓝

**通勤提醒级别标签文字**:
- 亮色模式: 使用反色（`getLevelInvertedColor()`）
- 暗色模式: 使用原色（`getLevelColor()`）

**AI标签文字**:
- 亮色模式: 蓝色 `#004CFF`（金琥珀色的反色）
- 暗色模式: 金琥珀色 `#FFB300`（原色）

### 7. 透明度使用规范

#### 卡片透明度（主题适配）
- 大卡片背景（暗色模式）: `0x25FFFFFF` (15%)
- 大卡片背景（亮色模式）: 不透明白色

#### 小卡片透明度（内部小卡片）
- 背景透明度: 亮色 `0.15`，暗色 `0.25`
- 图标容器背景: 亮色 `0.2`，暗色 `0.3`

#### 描边/阴影透明度
- 亮色模式描边: 白色 `0.4`
- 暗色模式描边: 黑色 `0.1`
- 亮色模式阴影: 黑色 `0.1`
- 暗色模式阴影: 黑色 `0.3`

### 8. 颜色命名规范

#### 使用 AppColors 常量
- ✅ `AppColors.primaryBlue` - 主题蓝色（自适应）
- ✅ `AppColors.textPrimary` - 主要文字（自适应）
- ✅ `AppColors.warning` - 警告色（自适应）
- ✅ `AppColors.accentGreen` - 强调绿色（自适应）

#### 避免硬编码
- ❌ `Colors.blue` - 不适配主题
- ❌ `Color(0xFF123456)` - 直接写在UI代码中
- ✅ 特殊颜色定义为常量或在 AppColors 中定义

#### 临时颜色使用
如需使用非 AppColors 定义的颜色：
```dart
// 不推荐（硬编码）
color: Colors.red

// 推荐（定义为常量）
static const myCustomColor = Color(0xFFD32F2F);
color: myCustomColor

// 更推荐（主题适配）
color: themeProvider.isLightTheme 
  ? Color(0xFFD32F2F)  // 亮色
  : Color(0xFFFF6B6B)  // 暗色
```

### 9. 常用颜色速查表

| 用途 | 暗色模式 | 亮色模式 | AppColors 常量 |
|------|----------|----------|----------------|
| App背景 | `#012d78→#0A1B3D` 渐变 | `#F0F8FF→#E1F5FE` 渐变 | `primaryGradient` |
| 卡片背景 | `#FFFFFF25` (15%白) | `#FFFFFF` (纯白) | `materialCardColor` |
| 主文字 | `#FFFFFF` (白色) | `#001A4D` (深蓝) | `textPrimary` |
| 次文字 | `#E8F4FD` (浅蓝) | `#003366` (深蓝) | `textSecondary` |
| 主题色 | `#4A90E2` (亮蓝) | `#012d78` (深蓝) | `primaryBlue` |
| 成功色 | `#4CAF50` (绿) | `#2E7D32` (深绿) | `accentGreen` |
| 警告色 | `#FFB74D` (橙) | `#E65100` (深橙) | `warning` |
| 错误色 | `#FF6B6B` (浅红) | `#D32F2F` (深红) | `error` |

### 10. Drawer 抽屉菜单颜色规范

#### 头部背景
- 使用 `AppColors.primaryGradient`（与App背景一致）
- **暗色模式**: 深蓝渐变 `#012d78 → #0A1B3D`
- **亮色模式**: 浅蓝渐变 `#F0F8FF → #E1F5FE`

#### 头部文字
- **亮色模式**: 
  - 标题: `AppColors.primaryBlue` (深蓝色)
  - 副标题: `AppColors.textSecondary` (次要文字色)
- **暗色模式**: 
  - 标题: `Colors.white` (白色)
  - 副标题: `Colors.white.withOpacity(0.9)` (半透明白色)

#### 头部Logo
- 尺寸: 48×48
- 圆角: 10px
- 背景: 白色容器（提高可见度）
- 阴影: `Colors.black.withOpacity(0.1)`, blurRadius: 8, offset: (0, 2)
- 图片: `assets/images/app_icon.png`

#### 菜单项
**图标颜色统一使用主题色** (`AppColors.primaryBlue`):
- 图标容器背景: `primaryBlue.withOpacity(0.1)`
- 图标颜色: `AppColors.primaryBlue`（暗色=亮蓝，亮色=深蓝）
- 标题文字: `AppColors.textPrimary`
- 副标题文字: `AppColors.textSecondary`
- 右箭头: `AppColors.textTertiary`

#### 二级菜单（ExpansionTile）
- 父菜单图标: `AppColors.primaryBlue`（统一主题色）
- 展开/收起图标:
  - 展开时: `AppColors.textPrimary`
  - 收起时: `AppColors.textSecondary`
- 子菜单项:
  - 缩进: `left: 72px`
  - 图标: `AppColors.primaryBlue`（统一主题色）
  - 文字: `AppColors.textPrimary`

